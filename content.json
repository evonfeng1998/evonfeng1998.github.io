{"meta":{"title":"EvonFeng's Blog","subtitle":"小锋的个人博客","description":"学无止境，头发也是","author":"EvonFeng","url":"http://evonFengBlog","root":"/"},"pages":[],"posts":[{"title":"springboot","slug":"test","date":"2019-12-02T10:10:17.107Z","updated":"2019-12-02T10:58:32.961Z","comments":true,"path":"2019/12/02/test/","link":"","permalink":"http://evonfengblog/2019/12/02/test/","excerpt":"","text":"SpringBoot简介1.1 原有Spring优缺点分析1.1.1 Spring的优点分析Spring是Java企业版（Java Enterprise Edition，JEE，也称J2EE）的轻量级代替品。⽆需开发重量级的 Enterprise JavaBean（EJB），Spring为企业级Java开发提供了⼀种相对简单的⽅法，通过依赖注⼊和 ⾯向切⾯编程，⽤简单的Java对象（Plain Old Java Object，POJO）实现了EJB的功能。 1.1.2 Spring的缺点分析虽然Spring的组件代码是轻量级的，但它的配置却是重量级的。⼀开始，Spring⽤XML配置，⽽且是很 多XML配置。Spring 2.5引⼊了基于注解的组件扫描，这消除了⼤量针对应⽤程序⾃身组件的显式XML 配置。Spring 3.0引⼊了基于Java的配置，这是⼀种类型安全的可重构配置⽅式，可以代替XML。 所有这些配置都代表了开发时的损耗。因为在思考Spring特性配置和解决业务问题之间需要进⾏思维切 换，所以编写配置挤占了编写应⽤程序逻辑的时间。和所有框架⼀样，Spring实⽤，但与此同时它要求 的回报也不少。 除此之外，项⽬的依赖管理也是⼀件耗时耗⼒的事情。在环境搭建时，需要分析要导⼊哪些库的坐标， ⽽且还需要分析导⼊与之有依赖关系的其他库的坐标，⼀旦选错了依赖的版本，随之⽽来的不兼容问题 就会严重阻碍项⽬的开发进度。 1.2 SpringBoot的概述1.2.1 SpringBoot解决上述Spring的缺点SpringBoot对上述Spring的缺点进⾏的改善和优化，基于约定优于配置的思想，可以让开发⼈员不必在 配置与逻辑业务之间进⾏思维的切换，全身⼼的投⼊到逻辑业务的代码编写中，从⽽⼤⼤提⾼了开发的 效率，⼀定程度上缩短了项⽬周期。 1.2.2 SpringBoot的特点 为基于Spring的开发提供更快的⼊⻔体验 开箱即⽤，没有代码⽣成，也⽆需XML配置。同时也可以修改默认值来满⾜特定的需求 提供了⼀些⼤型项⽬中常⻅的⾮功能性特性，如嵌⼊式服务器、安全、指标，健康检测、外部配置 等 SpringBoot不是对Spring功能上的增强，⽽是提供了⼀种快速使⽤Spring的⽅式 1.2.3 SpringBoot的核⼼功能 起步依赖 起步依赖本质上是⼀个Maven项⽬对象模型（Project Object Model，POM），定义了对其他库 的传递依赖，这些东⻄加在⼀起即⽀持某项功能。 简单的说，起步依赖就是将具备某种功能的坐标打包到⼀起，并提供⼀些默认的功能。 自动配置 Spring Boot的⾃动配置是⼀个运⾏时（更准确地说，是应⽤程序启动时）的过程，考虑了众多因 素，才决定Spring配置应该⽤哪个，不该⽤哪个。该过程是Spring⾃动完成的。","categories":[],"tags":[]}]}